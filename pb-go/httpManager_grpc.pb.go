// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HttpManagerClient is the client API for HttpManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpManagerClient interface {
	//    Http
	GetAllHttps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HttpInfoList, error)
	AddOrUpdateHttp(ctx context.Context, in *HttpInfo, opts ...grpc.CallOption) (*OperationResponse, error)
	DelHttp(ctx context.Context, in *HttpInfo, opts ...grpc.CallOption) (*OperationResponse, error)
}

type httpManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpManagerClient(cc grpc.ClientConnInterface) HttpManagerClient {
	return &httpManagerClient{cc}
}

func (c *httpManagerClient) GetAllHttps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HttpInfoList, error) {
	out := new(HttpInfoList)
	err := c.cc.Invoke(ctx, "/pb.HttpManager/GetAllHttps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpManagerClient) AddOrUpdateHttp(ctx context.Context, in *HttpInfo, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/pb.HttpManager/AddOrUpdateHttp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpManagerClient) DelHttp(ctx context.Context, in *HttpInfo, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/pb.HttpManager/DelHttp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpManagerServer is the server API for HttpManager service.
// All implementations must embed UnimplementedHttpManagerServer
// for forward compatibility
type HttpManagerServer interface {
	//    Http
	GetAllHttps(context.Context, *Empty) (*HttpInfoList, error)
	AddOrUpdateHttp(context.Context, *HttpInfo) (*OperationResponse, error)
	DelHttp(context.Context, *HttpInfo) (*OperationResponse, error)
	mustEmbedUnimplementedHttpManagerServer()
}

// UnimplementedHttpManagerServer must be embedded to have forward compatible implementations.
type UnimplementedHttpManagerServer struct {
}

func (UnimplementedHttpManagerServer) GetAllHttps(context.Context, *Empty) (*HttpInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHttps not implemented")
}
func (UnimplementedHttpManagerServer) AddOrUpdateHttp(context.Context, *HttpInfo) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateHttp not implemented")
}
func (UnimplementedHttpManagerServer) DelHttp(context.Context, *HttpInfo) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelHttp not implemented")
}
func (UnimplementedHttpManagerServer) mustEmbedUnimplementedHttpManagerServer() {}

// UnsafeHttpManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpManagerServer will
// result in compilation errors.
type UnsafeHttpManagerServer interface {
	mustEmbedUnimplementedHttpManagerServer()
}

func RegisterHttpManagerServer(s grpc.ServiceRegistrar, srv HttpManagerServer) {
	s.RegisterService(&_HttpManager_serviceDesc, srv)
}

func _HttpManager_GetAllHttps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpManagerServer).GetAllHttps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HttpManager/GetAllHttps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpManagerServer).GetAllHttps(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpManager_AddOrUpdateHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpManagerServer).AddOrUpdateHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HttpManager/AddOrUpdateHttp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpManagerServer).AddOrUpdateHttp(ctx, req.(*HttpInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpManager_DelHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpManagerServer).DelHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HttpManager/DelHttp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpManagerServer).DelHttp(ctx, req.(*HttpInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _HttpManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HttpManager",
	HandlerType: (*HttpManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllHttps",
			Handler:    _HttpManager_GetAllHttps_Handler,
		},
		{
			MethodName: "AddOrUpdateHttp",
			Handler:    _HttpManager_AddOrUpdateHttp_Handler,
		},
		{
			MethodName: "DelHttp",
			Handler:    _HttpManager_DelHttp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "httpManager.proto",
}
