// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServerManagerClient is the client API for ServerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerManagerClient interface {
	//    对服务器的操作
	AddServer(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*OperationResponse, error)
}

type serverManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewServerManagerClient(cc grpc.ClientConnInterface) ServerManagerClient {
	return &serverManagerClient{cc}
}

func (c *serverManagerClient) AddServer(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerManager/AddServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerManagerServer is the server API for ServerManager service.
// All implementations must embed UnimplementedServerManagerServer
// for forward compatibility
type ServerManagerServer interface {
	//    对服务器的操作
	AddServer(context.Context, *ServerInfo) (*OperationResponse, error)
	mustEmbedUnimplementedServerManagerServer()
}

// UnimplementedServerManagerServer must be embedded to have forward compatible implementations.
type UnimplementedServerManagerServer struct {
}

func (UnimplementedServerManagerServer) AddServer(context.Context, *ServerInfo) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServer not implemented")
}
func (UnimplementedServerManagerServer) mustEmbedUnimplementedServerManagerServer() {}

// UnsafeServerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerManagerServer will
// result in compilation errors.
type UnsafeServerManagerServer interface {
	mustEmbedUnimplementedServerManagerServer()
}

func RegisterServerManagerServer(s grpc.ServiceRegistrar, srv ServerManagerServer) {
	s.RegisterService(&_ServerManager_serviceDesc, srv)
}

func _ServerManager_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManager/AddServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServer).AddServer(ctx, req.(*ServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServerManager",
	HandlerType: (*ServerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServer",
			Handler:    _ServerManager_AddServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverManager.proto",
}
