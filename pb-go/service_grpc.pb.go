// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package iot_manager_grpc_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	//    登录，对用户的操作
	LoginWithUserLoginInfo(ctx context.Context, in *UserLoginInfo, opts ...grpc.CallOption) (*OperationResponse, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) LoginWithUserLoginInfo(ctx context.Context, in *UserLoginInfo, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/pb.UserManager/LoginWithUserLoginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations must embed UnimplementedUserManagerServer
// for forward compatibility
type UserManagerServer interface {
	//    登录，对用户的操作
	LoginWithUserLoginInfo(context.Context, *UserLoginInfo) (*OperationResponse, error)
	mustEmbedUnimplementedUserManagerServer()
}

// UnimplementedUserManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServer struct {
}

func (UnimplementedUserManagerServer) LoginWithUserLoginInfo(context.Context, *UserLoginInfo) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithUserLoginInfo not implemented")
}
func (UnimplementedUserManagerServer) mustEmbedUnimplementedUserManagerServer() {}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s grpc.ServiceRegistrar, srv UserManagerServer) {
	s.RegisterService(&_UserManager_serviceDesc, srv)
}

func _UserManager_LoginWithUserLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).LoginWithUserLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserManager/LoginWithUserLoginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).LoginWithUserLoginInfo(ctx, req.(*UserLoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginWithUserLoginInfo",
			Handler:    _UserManager_LoginWithUserLoginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ServerManagerClient is the client API for ServerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerManagerClient interface {
	//    对服务器的操作
	AddServer(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*OperationResponse, error)
}

type serverManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewServerManagerClient(cc grpc.ClientConnInterface) ServerManagerClient {
	return &serverManagerClient{cc}
}

func (c *serverManagerClient) AddServer(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/pb.ServerManager/AddServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerManagerServer is the server API for ServerManager service.
// All implementations must embed UnimplementedServerManagerServer
// for forward compatibility
type ServerManagerServer interface {
	//    对服务器的操作
	AddServer(context.Context, *ServerInfo) (*OperationResponse, error)
	mustEmbedUnimplementedServerManagerServer()
}

// UnimplementedServerManagerServer must be embedded to have forward compatible implementations.
type UnimplementedServerManagerServer struct {
}

func (UnimplementedServerManagerServer) AddServer(context.Context, *ServerInfo) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServer not implemented")
}
func (UnimplementedServerManagerServer) mustEmbedUnimplementedServerManagerServer() {}

// UnsafeServerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerManagerServer will
// result in compilation errors.
type UnsafeServerManagerServer interface {
	mustEmbedUnimplementedServerManagerServer()
}

func RegisterServerManagerServer(s grpc.ServiceRegistrar, srv ServerManagerServer) {
	s.RegisterService(&_ServerManager_serviceDesc, srv)
}

func _ServerManager_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManager/AddServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServer).AddServer(ctx, req.(*ServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServerManager",
	HandlerType: (*ServerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServer",
			Handler:    _ServerManager_AddServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// GatewayManagerClient is the client API for GatewayManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayManagerClient interface {
	//    对网关的操作
	AddGateway(ctx context.Context, in *GatewayInfo, opts ...grpc.CallOption) (*OperationResponse, error)
}

type gatewayManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayManagerClient(cc grpc.ClientConnInterface) GatewayManagerClient {
	return &gatewayManagerClient{cc}
}

func (c *gatewayManagerClient) AddGateway(ctx context.Context, in *GatewayInfo, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/pb.GatewayManager/AddGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayManagerServer is the server API for GatewayManager service.
// All implementations must embed UnimplementedGatewayManagerServer
// for forward compatibility
type GatewayManagerServer interface {
	//    对网关的操作
	AddGateway(context.Context, *GatewayInfo) (*OperationResponse, error)
	mustEmbedUnimplementedGatewayManagerServer()
}

// UnimplementedGatewayManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayManagerServer struct {
}

func (UnimplementedGatewayManagerServer) AddGateway(context.Context, *GatewayInfo) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGateway not implemented")
}
func (UnimplementedGatewayManagerServer) mustEmbedUnimplementedGatewayManagerServer() {}

// UnsafeGatewayManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayManagerServer will
// result in compilation errors.
type UnsafeGatewayManagerServer interface {
	mustEmbedUnimplementedGatewayManagerServer()
}

func RegisterGatewayManagerServer(s grpc.ServiceRegistrar, srv GatewayManagerServer) {
	s.RegisterService(&_GatewayManager_serviceDesc, srv)
}

func _GatewayManager_AddGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayManagerServer).AddGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GatewayManager/AddGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayManagerServer).AddGateway(ctx, req.(*GatewayInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GatewayManager",
	HandlerType: (*GatewayManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGateway",
			Handler:    _GatewayManager_AddGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
